#!/usr/bin/env clojure

(ns secret-toss
  (:require
    [clojure.java.io :as io]
    [clojure.string :as string])
  (:import
    (java.util
      Base64)
    (javax.crypto
      Cipher)
    (javax.crypto.spec
      SecretKeySpec)))

(def charset "ISO-8859-1") ; binary
(defn ->bytes
  [s]
  (.getBytes s charset))

(defn ->str
  [ba]
  (String. ba charset))

(defn ->b64
  [s]
  (-> (Base64/getEncoder)
      (.encodeToString (->bytes s))
      string/trim))

(defn b64->str
  [s]
  (-> (Base64/getDecoder)
      (.decode (->bytes s))
      ->str))

(def rel-dir (io/file (System/getenv "HOME") ".cache" "secret-toss"))

(defn ->full-path
  [path]
  (if (string/starts-with? path "/")
    path
    (io/file rel-dir path)))

(defn get-secret
  []
  (-> (some-> (System/console)
              (.readPassword "secret: " (into-array []))
              ; char list not byte array
              (String.))
      (or (throw (Error. "Console not available")))))

(defn process
  [cmd env]
  (let [pb (doto (ProcessBuilder. (into-array cmd))
             (.inheritIO))
        e (.environment pb)
        _ (doseq [[k v] env]
            (.put e k v))]
    (-> pb
        (.start)
        (.waitFor)
        (System/exit))))

; (def algorithm "AES/CBC/PKCS5Padding")
(def algorithm "Blowfish")

(defn ->key
  [s]
  (SecretKeySpec. (->bytes s) algorithm))

(defn new-key
  []
  (apply str
         (map char
              (repeatedly 32
                          (partial rand-int
                                   128)))))

(defn cipher
  [mode s ky]
  (->  (Cipher/getInstance algorithm)
       (doto
         (.init mode (->key ky)))
       (.doFinal (->bytes s))
       (->str)))

(def encrypt (partial cipher Cipher/ENCRYPT_MODE))
(def decrypt (partial cipher Cipher/DECRYPT_MODE))

(defn $write
  [path]
  (let [path (->full-path path)
        ky (new-key)
        encrypted (encrypt (get-secret) ky)]
    (io/make-parents path)
    (spit path encrypted :encoding charset)
    (println (->b64 ky))))

(defn $read
  [path ky]
  (-> path
      ->full-path
      (slurp :encoding charset)
      (decrypt (b64->str ky))
      println))

(def wrap-var "SECRET_TOSS_WRAPPED")

(def wrapped
  (-> (System/getenv wrap-var)
      (or "")
      (string/split #" ")
      (->> (partition 2)
           (map vec)
           (into {}))))

(defn $wrap
  [path cmd]
  (let [k (-> (with-out-str
                ($write path))
              string/trim)
        wrap-val (string/join " " (-> wrapped
                                      (assoc path k)
                                      seq
                                      flatten))]
    (process cmd {wrap-var wrap-val})))

(defn $unwrap
  [path]
  ($read path (get wrapped path)))

(defn -main
  [action path & args]
  (case action
    "read" ($read path (first args))
    "write" ($write path)
    "wrap" ($wrap path args) ; TODO: multiple paths?
    "unwrap" ($unwrap path)
    (throw (Error. "Invalid command. Usage: secret-toss read|write|wrap|unwrap <name|path>"))))

(apply -main *command-line-args*)
